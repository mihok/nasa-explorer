@{
    ViewBag.Title = "Explore";
    Layout = "~/Views/Shared/_Skeleton.cshtml";
}

@section Head {
    <style type="text/css">
        body {
            padding-top: 60px; 
            overflow: hidden;
	        padding: 0;
	        margin: 0;       
        }
        .bottom  
        {
            position: absolute;
            bottom: 0;
            right: 0;
            color: black;
        }
        /*canvas { background: black; }*/
    </style>
}

@section Javascript {
    <script src="@Url.Content("~/Scripts/three.js/Three.js")"></script>
	<script src="@Url.Content("~/Scripts/three.js/Detector.js")"></script>
	<!-- https://github.com/mrdoob/stats.js -->
	<script src="@Url.Content("~/Scripts/three.js/Stats.js")"></script>

	<script src="@Url.Content("~/Scripts/threex/THREEx.screenshot.js")"></script>
	<script src="@Url.Content("~/Scripts/threex/THREEx.FullScreen.js")"></script>
	<script src="@Url.Content("~/Scripts/threex/THREEx.WindowResize.js")"></script>
	<script src="@Url.Content("~/Scripts/threex.dragpancontrols.js")"></script>
    <script type="text/javascript">
        var stats, scene, renderer;
        var camera, cameraControl;


        if (!init()) animate();

        function renderPlanets(sc) {
            for (var i = 0; i <= 8; i++) {
                $.ajax({
                    url: '/api/coords/' + (199 + (100 * i)),
                    dataType: 'json',
                    success: function (data) {
                        if (data) {
                            var radius = 5,
                                        segments = 16,
                                        rings = 16;
                            var geometry = new THREE.SphereGeometry(0.05, 16, 16); //new THREE.TorusGeometry(1, 0.42);
                            var material = new THREE.MeshNormalMaterial();
                            var planet = new THREE.Mesh(geometry, material);

                            planet.position.x = data[0].X;
                            planet.position.y = data[0].Y;
                            planet.position.z = data[0].Z;

                            sc.add(planet);
                        }
                    }
                });
            };
        };

        // init the scene
        function init() {

            if (Detector.webgl) {
                renderer = new THREE.WebGLRenderer({
                    antialias: true, // to get smoother output
                    preserveDrawingBuffer: true	// to allow screenshot
                });
                renderer.setClearColorHex(0xBBBBBB, 1);
                // uncomment if webgl is required
                //}else{
                //	Detector.addGetWebGLMessage();
                //	return true;
            } else {
                renderer = new THREE.CanvasRenderer();
            }
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.getElementById('explore').appendChild(renderer.domElement);

            // add Stats.js - https://github.com/mrdoob/stats.js
            stats = new Stats();
            stats.domElement.style.position = 'absolute';
            stats.domElement.style.bottom = '0px';
            document.body.appendChild(stats.domElement);

            // create a scene
            scene = new THREE.Scene();

            // put a camera in the scene
            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 10000);
            camera.position.set(0, 0, 5);
            scene.add(camera);

            // create a camera contol
            cameraControls = new THREEx.DragPanControls(camera)

            // transparently support window resize
            THREEx.WindowResize.bind(renderer, camera);
            // allow 'p' to make screenshot
            THREEx.Screenshot.bindKey(renderer);
            // allow 'f' to go fullscreen where this feature is supported
            if (THREEx.FullScreen.available()) {
                THREEx.FullScreen.bindKey();
                document.getElementById('inlineDoc').innerHTML += "- <i>f</i> for fullscreen";
            }

            // here you add your objects
            // - you will most likely replace this part by your own
            /*var geometry = new THREE.SphereGeometry(1, 16, 16); //new THREE.TorusGeometry(1, 0.42);
            var material = new THREE.MeshNormalMaterial();
            var mesh = new THREE.Mesh(geometry, material);
            
            scene.add(mesh);
            */

            var geometry = new THREE.SphereGeometry(0.1, 16, 16); //new THREE.TorusGeometry(1, 0.42);
            var material = new THREE.MeshLambertMaterial({ color: 0xCC0000 });
            var sun = new THREE.Mesh(geometry, material);

            sun.position.x = 0;
            sun.position.y = 0;
            sun.position.z = 0;

            scene.add(sun);

            renderPlanets(scene);
        }

        // animation loop
        function animate() {

            // loop on request animation loop
            // - it has to be at the begining of the function
            // - see details at http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
            requestAnimationFrame(animate);

            // do the render
            render();

            // update stats
            stats.update();
        }

        // render the scene
        function render() {

            // update camera controls
            cameraControls.update();

            // actually render the scene
            renderer.render(scene, camera);
        }
    </script>
}
<div class="bottom" id="inlineDoc" >
	<b>loading may take several minutes</b> - <i>p</i> for screenshot
</div> 

<div id="explore"></div>